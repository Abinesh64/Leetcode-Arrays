#Sol 1 : with time complexity O(n^2)
int singleNumber(int* nums, int numsSize){
        for(int i=0;i<numsSize;i++)
        {
            int count = 0;
            for(int j=0;j<numsSize;j++)
            {
                if(nums[i]==nums[j])
                ++count;
            }
            if(count==1)
            return nums[i];
        }
        return 0;
}


#Sol 2 : Using unordered_map

class Solution {
public:
    int singleNumber(vector<int>& nums) {
        unordered_map<int,int> m;
        for(auto i:nums)
        m[i]=m[i]+1;
        for(auto i:m)
        {
        if(i.second==1)
        return i.first;
        }
        return 0;
    }
};

