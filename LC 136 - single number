//LC-136 Single Number(using sorting)

class Solution {
public:
    int singleNumber(vector<int>& nums) {
        sort(nums.begin(),nums.end());
        int n=nums.size();
        for(int i=0;i<n-1;i+=2)
        if(nums[i]!=nums[i+1])
        return nums[i];
        return nums[n-1];
        }
};


//Single number using unordered map

#include <iostream>
#include<vector>
#include<unordered_map>
using namespace std;
int singleNumber(vector<int>& nums) {
        unordered_map<int,int> m;
        for(auto i:nums)
        m[i]=m[i]+1;
        for(auto i:m)
        if(i.second==1)
        return i.first;
}       
int main()
{
    vector<int> vect={1,2,3,2,1};
    int abc = singleNumber(vect);
    cout<<abc;
    return 0;
}


// single number in an vector(with time complexity O(n^2))

#include <iostream>
#include <vector>
using namespace std;
int singleNumber(vector<int>& nums) {
        int n=nums.size();
        for(int i=0;i<n;i++)
        {
            int count = 0;
            for(int j=0;j<n;j++)
            {
                if(nums[i]==nums[j])
                ++count;
            }
            if(count==1)
            return nums[i];
        }
    }
int main()
{
    vector<int> vect={1,2,3,2,1};
    int abc = singleNumber(vect);
    cout<<abc;
    return 0;
}


//


